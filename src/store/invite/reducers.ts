import {
	InvitesState,
	InviteReduxActions,
	InviteReduxActionTypes,
} from './types';
import { reduxSwitchcase } from '../../helpers/utils';
import { IInvite, autoGenerateData } from '../../seed/data';

const initialState: InvitesState = {
	invites: autoGenerateData('invite', 10)
}

type InvitesCaseMap = {
	[key in InviteReduxActionTypes]: InvitesState;
}

function inviteCases(state: InvitesState, action: InviteReduxActions) {
	const cases: InvitesCaseMap = {
		[InviteReduxActionTypes.SEND_INVITE]: { invites: [...state.invites, action.payload as IInvite] },
		[InviteReduxActionTypes.DELETE_INVITE]: { invites: state.invites.filter((invite) => { return invite.id !== action.payload }) }
	};
	return cases;
}

export function inviteReducer(
	state = initialState,
	action: InviteReduxActions,
): InvitesState {
	// switch(action.type) {
	// 	case InviteReduxActionTypes.SEND_INVITE:
	// 		return { invites: [...state.invites, action.payload as Invite] };
	// 	case InviteReduxActionTypes.DELETE_INVITE:
	// 		return { invites: state.invites.filter((invite) => { return invite.id !== action.payload }) };
	// 	default:
	// 		return state;
	// }
	return reduxSwitchcase(inviteCases(state, action))(state)(action.type);
}