import { switchcaseF } from '../helpers/utils';

export type IDataType =
	'project' | 'session' | 'exercise';

export type IDataMap = {
	[key in IDataType]: any;
}

// Used for GraphQL Queries;
// export const dataQueryMap = {

// }


export const dataMap: IDataMap = {
	project: getProjects,
	session: getSessions,
	exercise: getExercises,
};

type IDataSetExampleType = {
	[key in IDataType]: any;
}

interface IDataSetExample extends IDataSetExampleType {
	project: IProject;
	exercise: IExercise;
	session: ISession;
}

const exampleDataSet: IDataSetExample = {
	project: {
		id: '',
		title: '',
		description: '',
		type: '',
	},
	session: {
		id: '',
		title: '',
		description: '',
	},
	exercise: {
		id: '',
		title: '',
		description: '',
		type: '',
	},
}

export interface IBaseObject {
	id: string;
}

export interface IProject extends IBaseObject {
	title: string;
	description: string;
	type: string;
}

export interface ISession extends IBaseObject {
	title: string;
	description: string;
}

export interface IExercise extends IBaseObject {
	title: string;
	description: string;
	type: string;
}

export function getProjects(count: number = 5): IProject[] {
	const results: IProject[] = [];
	for (let i = 0; i < count; i++) {
		results.push({
			description: `project-desc-${i}`,
			id: `p-${i}`,
			title: `project-title-${i}`,
			type: `project-type-${i}`,
		});
	}
	return results;
}

export function getSessions(count: number = 5): ISession[] {
	const results: ISession[] = [];
	for (let i = 0; i < count; i++) {
		results.push({
			description: `session-desc-${i}`,
			id: `s-${i}`,
			title: `session-title-${i}`,
		});
	}
	return results;
}

export function getExercises(count: number = 5): IExercise[] {
	const results: IExercise[] = [];
	for (let i = 0; i < count; i++) {
		const exercise: IExercise = {
			description: `exercise-desc-${i}`,
			id: `e-${i}`,
			title: `exercise-title-${i}`,
			type: `exercise-type-${i}`,
		};

		results.push(exercise);
	}
	return results;
}

function generateDataItemSet(exampleItem: any, count: number, itemName: string): any {
	const itemKeys = Object.keys(exampleItem);
	if ( exampleItem && itemKeys.length> 0) {
		const results = [];
		for (let i = 0; i < count; i++) {
			const item: any = {};
			for (let key of itemKeys) {
				item[key] = `${itemName}-${key.slice(0, 4)}-${i}`;
			}
			results.push(item);
		}
		return results;
	}
	return [];
}

export function generateAllData(dataExampleSet: IDataSetExample, count: number = 10) {
	const resultDataSet: any = {};
	const dataTypeNames = Object.keys(dataExampleSet);

	dataTypeNames.forEach((name: string) => {
		const dataTypeName = name as IDataType;
		const exampleItem = dataExampleSet[dataTypeName];
		resultDataSet[dataTypeName] = generateDataItemSet(exampleItem, count, dataTypeName);
	});

	return resultDataSet;
}

export function generateData<Type>(dataExampleSet: IDataSetExample, dataType: IDataType, count: number = 10) {
	const exampleItem = dataExampleSet[dataType];
	return generateDataItemSet(exampleItem, count, dataType) as Type[];
}

export function autoGenerateData<Type>(dataType: IDataType, count: number = 10): Type[] {
	return generateData<Type>(exampleDataSet, dataType, count);
}
export function getItems<T>(type: IDataType, count: number): T[] {
	// const results = switchcaseF(dataMap)(type)(count);
	const resultItems = switchcaseF(dataMap)(() => [])(type)(count);
	// console.log(resultItems);
	return (resultItems && resultItems.length > 0) ? resultItems : [];
}
