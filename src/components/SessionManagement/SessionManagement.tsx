import React, { Component } from 'react';
import { Flipper, Flipped } from 'react-flip-toolkit';

import './SessionManagement.css';
import { ISession, IUser, autoGenerateData } from '../../seed/data';
import { appConfig } from '../../configuration/appConfig';

interface ISessionManagementProps {
	session: ISession;
}

interface ISessionManagementState {
	activeUserIndex: number;
	sessionUsers: IUser[];
	isStarted: boolean;
}

export default class SessionManagement extends Component<ISessionManagementProps, ISessionManagementState> {
	constructor(props: ISessionManagementProps) {
		super(props);

		this.state = {
			activeUserIndex: 0,
			sessionUsers: [],
			isStarted: false,
		}

		this.iterateActiveUserIndex = this.iterateActiveUserIndex.bind(this);
		this.toggleIsStarted = this.toggleIsStarted.bind(this);
	}

	componentDidMount() {
		const { session } = this.props;
		const allUsers = autoGenerateData<IUser>('user', appConfig.itemGenerationCount);
		const sessionUsers = allUsers.filter((user: IUser) => {
			return session.userIds.includes(user.id);
		});

		this.setState({
			sessionUsers, 
		});
	}

	toggleIsStarted() {
		this.setState({
			isStarted: !this.state.isStarted,
		});
	}

	renderUsers() {
		const { sessionUsers } = this.state;
		const { userIds } = this.props.session;
		// console.log('sessionManagement', this.props.session);
		const { activeUserIndex } = this.state;
		const activeUserId = userIds[activeUserIndex];
		// console.log(activeUserId);
		const activeUserArray = sessionUsers.filter((user: IUser) => {
			return user.id === activeUserId;
		});

		const otherUsersArray = sessionUsers.filter((user: IUser) => {
			return user.id !== activeUserId;
		})

		// const newOrderedUsersArray = activeUserArray.concat(otherUsersArray);
		const newOrderedUsersArray = [...sessionUsers.slice(activeUserIndex, sessionUsers.length), ...sessionUsers.slice(0, activeUserIndex)]
		// console.log(newOrderedUsersArray);
		return newOrderedUsersArray.map((user: IUser, index: number) => {
			const isActive = user.id === activeUserId ? true : false;
			const selectedString = isActive ? 'user-container--selected turnBlue' : '';
			const animationString = index === newOrderedUsersArray.length - 1 ? 'unBlue translateLeft' : '';
			const tagAnimationString = this.state.isStarted ? 'flipToRed' : 'flipToGreen';
			const buttonColor = this.state.isStarted ? 'red' : 'lightgreen';
			// const borderStyle = this.state.isStarted && isActive ? { border: `2px solid ${buttonColor}`} : {};
			return (
				<Flipped key={user.id} flipId={user.id}>
					{/* <UserComponent key={user.id} user={user} isActive={isActive}/> */}
					<div style={{display: 'flex'}}>
						<div className={`user-container animated-user-container ${selectedString} ${animationString}`} >
							<div style={{display: 'flex'}}>
								<p>-ICON-</p>
								<p>{user.username}</p>
							</div>
							{ isActive ? <div onClick={this.toggleIsStarted} className={`animated-user-container translateRight`} style={{ background: buttonColor, marginRight: "10px", padding: '10px', boxShadow: '0 0 2px 2px rgba(50, 50, 50, 0.5)', perspective: '1000', transformStyle: 'preserve-3d' }}>{ this.state.isStarted ? 'Stop' : 'Start' }</div> : null}
							{/* <div style={{ width: '60px', height: '100%', display: 'flex' }}> */}
								{/* { isActive ? <div className="animated-user-container expandRight" style={{ background: 'gray', padding: '10px', height: '100%' }}>Start</div> : null} */}
							{/* </div> */}
							
						</div>
					</div>
					{/* <p>{user.id}</p> */}
				</Flipped>
			);
		});
	}

	iterateActiveUserIndex() {
		const { activeUserIndex, sessionUsers } = this.state;
		if (activeUserIndex < sessionUsers.length - 1) {
			this.setState({
				activeUserIndex: activeUserIndex + 1,
			});
		} else {
			this.setState({
				activeUserIndex: 0,
			});
		}
	}

	render() {
		const { sessionUsers } = this.state;
		const { userIds } = this.props.session;
		// console.log('sessionManagement', this.props.session);
		const { activeUserIndex } = this.state;
		const activeUserId = userIds[activeUserIndex];
		// console.log(activeUserId);
		const activeUserArray = sessionUsers.filter((user: IUser) => {
			return user.id === activeUserId;
		});

		const otherUsersArray = sessionUsers.filter((user: IUser) => {
			return user.id !== activeUserId;
		})

		const newOrderedUsersArray = activeUserArray.concat(otherUsersArray);
		const newUserIdsArray = newOrderedUsersArray.map((user) => {
			return user.id;
		});
		return (
			<div className="session-management-container">
				{/* <h3 className="session-management__title">Session Management</h3> */}
				<div>
					Current Round: 1/8
				</div>
				<div>
					Current Time Limit: 7:00 (*Random Number between 7-13 mins)
				</div>
				<div>
					Click For help or instructions on how to play the game.
				</div>
				{/* <div> */}
					{/* <Flipper
						flipKey={activeUserId}
						className="staggered-list-content"
						spring="gentle"
						staggerConfig={{
							card: {
								reverse: activeUserId !== null,
								speed: 0.5
							}
						}}
						decisionData={activeUserId}
					> */}
					
					<Flipper 
						className="session-management__users-list"
						flipKey={newUserIdsArray.join("")} 
					>
						{this.renderUsers()}
					</Flipper>
				{/* </div> */}
				<div>
					<button onClick={this.iterateActiveUserIndex}>Next User</button>
				</div>
				<div>
					*Button To Create Note*
				</div>
				<div>
					Other Events
				</div>
			</div>
		);
	}	
}

interface IUserComponentProps {
	user: IUser;
	isActive: boolean;
}

// class UserComponent extends Component<IUserComponentProps, {}> {
// 	render() {
// 		const { user, isActive } = this.props;
// 		const animationStyleString = isActive ? '' : '';

// 		return (
// 			<div className={"user-container " + animationStyleString}>
// 				<p>ICON</p>
// 				<p>{user.username}</p>
// 			</div>
// 		);
// 	}
// }

const UserComponent = (props: IUserComponentProps) => {
	const { user, isActive } = props;
	const animationStyleString = isActive ? '' : '';

	return (
		<div className={"user-container " + animationStyleString}>
			<p>ICON</p>
			<p>{user.username}</p>
		</div>
	);
}


// const shouldFlip = (index: any) => (prev: any, current: any) =>
//   index === prev || index === current;

// const ListItem = (props: any) => {
// 	const { indexId } = props;
// 	return (
// 	  <Flipped
// 		flipId={`listItem-${index}`}
// 		stagger="card"
// 		shouldInvert={shouldFlip(index)}
// 	  >
// 		<div
// 		  className="listItem"
// 		  style={{ backgroundColor: color }}
// 		  onClick={() => onClick(index)}
// 		>
// 		  <Flipped inverseFlipId={`listItem-${index}`}>
// 			<div className="listItemContent">
// 			  <Flipped
// 				flipId={`avatar-${index}`}
// 				stagger="card-content"
// 				shouldFlip={shouldFlip(index)}
// 			  >
// 				<div className="avatar" />
// 			  </Flipped>
// 			  <div className="description">
// 				{baseArray.map(i => (
// 				  <Flipped
// 					flipId={`description-${index}-${i}`}
// 					stagger="card-content"
// 					shouldFlip={shouldFlip(index)}
// 				  >
// 					<div />
// 				  </Flipped>
// 				))}
// 			  </div>
// 			</div>
// 		  </Flipped>
// 		</div>
// 	  </Flipped>
// 	);
//   };
  
//   const ExpandedListItem = (props: any) => {
// 	const { indexId } = props;
// 	return (
// 	  <Flipped
// 		flipId={indexId}
// 		stagger="card"
// 		onStart={el => {
// 		  setTimeout(() => {
// 			el.classList.add("animated-in");
// 		  }, 400);
// 		}}
// 	  >
// 		<div
// 		  className="expandedListItem"
// 		>
// 		  <Flipped inverseFlipId={indexId}>
// 			<div className="expandedListItemContent">
// 			  <Flipped flipId={`avatar-${indexId}`} stagger="card-content">
// 				<div className="avatar avatarExpanded" />
// 			  </Flipped>
// 			  <div className="description">
// 				{baseArray.map(i => (
// 				  <Flipped
// 					flipId={`description-${index}-${i}`}
// 					stagger="card-content"
// 				  >
// 					<div />
// 				  </Flipped>
// 				))}
// 			  </div>
// 			  <div className="additional-content">
// 				{baseArray.map(i => <div />)}
// 			  </div>
// 			</div>
// 		  </Flipped>
// 		</div>
// 	  </Flipped>
// 	);
//   };
// export default SessionManagement;
